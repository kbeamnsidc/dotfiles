# ---------------------------
# General Bash Configuration
# ---------------------------

# Many settings taken from 'Sensible Bash' by Mattia Tezzele:
# https://mrzool.cc/writing/sensible-bash/

export PS1="\n[\u@\h] [\w] \t\n\\$ \[$(tput sgr0)\]"

set -o vi

# ---------
# Autocompletion
# ---------
# Setup auto-complete
[[ $PS1 && -f /usr/share/bash-completion/bash_completion ]] && \
    . /usr/share/bash-completion/bash_completion

# TODO: WAT?
# autoload -U +X bashcompinit && bashcompinit

bind "set completion-ignore-case on"
bind "set completion-map-case on"
bind "set show-all-if-ambiguous on"

# ---------
# Shell history
# ---------
# Append to the history file, don't overwrite it
shopt -s histappend

# Save multi-line commands as one command
shopt -s cmdhist

# Record each line as it gets issued
PROMPT_COMMAND='history -a'

# Huge history. Doesn't appear to slow things down, so why not?
HISTSIZE=500000
HISTFILESIZE=100000

# Avoid duplicate entries
HISTCONTROL="erasedups:ignoreboth"

# Don't record some commands
export HISTIGNORE="&:[ ]*:exit:ls:bg:fg:history"

# Useful timestamp format
HISTTIMEFORMAT='%F %T '

# ---------
# Automatic cd behavior
# ---------
shopt -s autocd
shopt -s dirspell
shopt -s cdspell

CDPATH=".:$HOME/projects"

shopt -s cdable_vars
export dotfiles="$HOME/projects/dotfiles"
export tools="$HOME/tools"

# ---------------------------
# Tool Setup
# ---------------------------

PATH=$PATH:~/.local/bin

alias fd=fdfind

# Workaround for git / pyenv conflict
export GIT_INTERNAL_GETTEXT_TEST_FALLBACKS=1

export DISABLE_AUTO_TITLE='true'

# Customize 'bat'
export BAG_THEME="TwoDark"

# FZF
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# ---------
# Go
# ---------
PATH=$PATH:/usr/local/go/bin:$HOME/go/bin

# ---------
# JavaScript
# ---------
# export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# TODO: nvm in bash


# ---------------------------
# Python
# ---------------------------
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
export PYENV_VIRTUALENV_DISABLE_PROMPT=0
export PYENV_VIRTUALENV_VERBOSE_ACTIVATE=1
eval "$(pyenv init --path)"
source $(pyenv root)/completions/pyenv.zsh
# Note: pyenv is activated at the end of the script

PATH="$HOME/.poetry/bin:$PATH"

# TODO: WAT?

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
# __conda_setup="$('/home/kbeam/.pyenv/versions/miniforge3-4.9.2/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
# if [ $? -eq 0 ]; then
#     eval "$__conda_setup"
# else
#     if [ -f "/home/kbeam/.pyenv/versions/miniforge3-4.9.2/etc/profile.d/conda.sh" ]; then
#         . "/home/kbeam/.pyenv/versions/miniforge3-4.9.2/etc/profile.d/conda.sh"
#     else
#         PATH="/home/kbeam/.pyenv/versions/miniforge3-4.9.2/bin:$PATH"
#     fi
# fi
# unset __conda_setup
# <<< conda initialize <<<

# ---------
# Ruby
# ---------
# Load RVM into a shell session *as a function*
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
# Add RVM to PATH for scripting.
PATH="$PATH:$HOME/.rvm/bin"

# ---------
# Rust
# ---------
PATH="$HOME/.cargo/bin:$PATH"

# ---------
# Terraform
# ---------
complete -C /usr/bin/terraform terraform

# ---------
# Julia
# ---------
export PATH="$PATH:$HOME/tools/julia/julia-1.7.1/bin"

# ---------
# Activate pyenv
# ---------
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

export PATH
